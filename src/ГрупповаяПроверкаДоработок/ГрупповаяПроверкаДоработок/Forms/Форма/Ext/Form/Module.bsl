
&НаКлиенте
Перем ОткрытыеОкна;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Формы_КоличествоОбъектов) Тогда
		Формы_КоличествоОбъектов = 1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Справочники_КоличествоОбъектов) Тогда
		Справочники_КоличествоОбъектов = 1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документы_КоличествоОбъектов) Тогда
		Документы_КоличествоОбъектов = 1;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверки(Команда)
	
	Если ПроверятьФормы Тогда
		Формы_Проверка();
	КонецЕсли;
	
	Если ПроверятьДокументы Тогда
		Отчеты_Проверка();
	КонецЕсли;
	
	Если ПроверятьПечать Тогда
		Печать_Проверка();
	КонецЕсли;
	
	Если ПроверятьДокументы Тогда
		Документы_Проверка();
	КонецЕсли;
	
	Если ПроверятьСправочники Тогда
		СправочникиИПВХ_Проверка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формы_Проверка()
	
	ОткрытыеОкна = Новый Массив;
	Окна = ПолучитьОкна();
	Для Счетчик = 0 По Окна.Количество() - 1 Цикл
		Если Окна[Счетчик] = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		ОткрытыеОкна.Добавить(Окна[Счетчик]);
	КонецЦикла; 
	
	ФормыДляВыполненияТестирования = Новый Массив();
	Формы_ВыполнитьВыборкуФорм(ФормыДляВыполненияТестирования);
	Формы_ВыполнитьОткрытиеФорм(ФормыДляВыполненияТестирования);
	
КонецПроцедуры

&НаКлиенте
Процедура Отчеты_Проверка()
	
	ПараметрыФормированияОтчета = Новый Структура("ИмяОтчета,ХешНастроек,Настройки,КлючВарианта,ОтчетВариант");
	
	Для Каждого СтрокаГруппы Из Отчеты_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаЭлемента Из СтрокаГруппы.ПолучитьЭлементы() Цикл
			
			Если СтрокаЭлемента.Тестировать Тогда
				
				Состояние("Формируется вариант отчета " + СтрокаЭлемента.Представление);
				ЗаполнитьЗначенияСвойств(ПараметрыФормированияОтчета, СтрокаЭлемента);
				Отчеты_СформироватьФайлОтчета(ПараметрыФормированияОтчета);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать_Проверка()
	
	ПараметрыФормирования = Новый Структура("МенеджерПечати,Идентификатор,ДополнительныеПараметры,ИмяИсточника,ОбъектПечати,Представление");
	
	Для Каждого СтрокаТипаМетаданных Из Печать_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаГруппы Из СтрокаТипаМетаданных.ПолучитьЭлементы() Цикл
			
			Для Каждого СтрокаЭлемента Из СтрокаГруппы.ПолучитьЭлементы() Цикл
				
				Если Не СтрокаЭлемента.Тестировать Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаЭлемента.ОбъектПечати) Тогда
					
					Состояние("Формируется печатная форма " + СтрокаЭлемента.Представление);
				
					ЗаполнитьЗначенияСвойств(ПараметрыФормирования, СтрокаЭлемента);
					
					Печать_СформироватьФайлПечатнойФормы(ПараметрыФормирования);
					
				КонецЕсли; 
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Документы_Проверка()
	
	Попытка
	
		ОткрытыеОкна = Новый Массив;
		Окна = ПолучитьОкна();
		Для Счетчик = 0 По Окна.Количество() - 1 Цикл
			Если Окна[Счетчик] = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			ОткрытыеОкна.Добавить(Окна[Счетчик]);
		КонецЦикла; 
		
		Документы_ВыполнитьТестНаКлиенте();
		
	Исключение
		
		НоваяСтрока_Информация = _Информация.Добавить();
		НоваяСтрока_Информация.ТипОшибки = "Документы";
		НоваяСтрока_Информация.ПроверямыйОбъект = "Документы";
		НоваяСтрока_Информация.Данные           = Неопределено;
		НоваяСтрока_Информация.Описание         = "Ошибка при выполнении тестирования" 
		+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникиИПВХ_Проверка()
	
	Попытка
		
		ОткрытыеОкна = Новый Массив;
		Окна = ПолучитьОкна();
		Для Счетчик = 0 По Окна.Количество() - 1 Цикл
			Если Окна[Счетчик] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОткрытыеОкна.Добавить(Окна[Счетчик]);
		КонецЦикла; 
		
		Справочники_ПротестироватьПоТиповымНастройкам();
		
	Исключение
		
		НоваяСтрока_Информация = _Информация.Добавить();
		НоваяСтрока_Информация.ТипОшибки = "Справочники";
		НоваяСтрока_Информация.ПроверямыйОбъект = "Справочники";
		НоваяСтрока_Информация.Данные           = Неопределено;
		НоваяСтрока_Информация.Описание         = "При тестировании объектов не должно возникать ошибок обработки " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;

КонецПроцедуры

&НаСервереБезКонтекста
Функция Справочники_ОтсеиватьГруппы(ИмяОбъектаМетаданных)
	
	МетаданныеОбъекта       = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаМетаданных);
	ИерархияГруппИЭлементов = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;

	Если Лев(ИмяОбъектаМетаданных, 17) = "ПланВидовРасчета." Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат МетаданныеОбъекта.Иерархический
	     И (    (Лев(ИмяОбъектаМетаданных, 11) = "Справочник." И МетаданныеОбъекта.ВидИерархии = ИерархияГруппИЭлементов)
	        ИЛИ  Лев(ИмяОбъектаМетаданных, 23) = "ПланВидовХарактеристик."
	       );
	
КонецФункции

&НаКлиенте
Процедура Формы_ОшибкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле <> Элементы._Информация_ПроверямыйОбъект Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные        = Элементы._Информация.ТекущиеДанные; 
	СтандартнаяОбработка = Ложь;
	Если ТекущиеДанные.ТипОшибки = "Формы" Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ПроверямыйОбъект) Тогда
			
			ПараметрыФормы = Новый Структура;
			Если ЗначениеЗаполнено(ТекущиеДанные.Данные) Тогда
				ПараметрыФормы.Вставить("Отбор", Новый Структура("Ключ", ТекущиеДанные.Данные));
			КонецЕсли; 
			
			ОткрытьФорму(ТекущиеДанные.ПроверямыйОбъект, ПараметрыФормы);
			
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формы_УстановитьФлажки(Команда)
	
	ВыделенныеСтроки = Элементы.Формы_ДеревоОбъектов.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		
		Для Каждого Индекс Из ВыделенныеСтроки Цикл
			Формы_ПроставитьЗначенияПодчиненных(Формы_ДеревоОбъектов.НайтиПоИдентификатору(Индекс), Истина);
		КонецЦикла; 
		
	Иначе
		Формы_ПроставитьЗначенияПодчиненных(Формы_ДеревоОбъектов, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формы_СнятьФлажки(Команда)
	
	ВыделенныеСтроки = Элементы.Формы_ДеревоОбъектов.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		
		Для Каждого Индекс Из ВыделенныеСтроки Цикл
			Формы_ПроставитьЗначенияПодчиненных(Формы_ДеревоОбъектов.НайтиПоИдентификатору(Индекс), Ложь);
		КонецЦикла; 
		
	Иначе
		Формы_ПроставитьЗначенияПодчиненных(Формы_ДеревоОбъектов, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формы_РазвернутьВсеГруппы(Команда)
	Для Каждого СтрокаДерева Из Формы_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Элементы.Формы_ДеревоОбъектов.Развернуть(СтрокаДерева.ПолучитьИдентификатор())
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Формы_СвернутьВсеГруппы(Команда)
	Для Каждого СтрокаДерева Из Формы_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Элементы.Формы_ДеревоОбъектов.Свернуть(СтрокаДерева.ПолучитьИдентификатор())
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция Формы_ПолучитьТаблицуМетаданных();
	
	ТаблицаМетаданных = Новый ТаблицаЗначений;
	ТаблицаМетаданных.Колонки.Добавить("ПолноеИмя");
	ТаблицаМетаданных.Колонки.Добавить("Тестировать");
	
	Возврат ТаблицаМетаданных;
	
КонецФункции

&НаСервере
Процедура Формы_ВнестиИзмененияВДеревоИзНастроек(ТаблицаМетаданных)
	
	Для Каждого КореньУзла Из Формы_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаМетаданного Из КореньУзла.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаФормы Из СтрокаМетаданного.ПолучитьЭлементы() Цикл
				
				НайденнаяСтрока = ТаблицаМетаданных.Найти(СтрокаФормы.ПолноеИмя, "ПолноеИмя");
				
				Если НайденнаяСтрока <> Неопределено Тогда 
					ЗаполнитьЗначенияСвойств(СтрокаФормы, НайденнаяСтрока);
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Формы_РазвернутьДерево(ТекСтрокаДерева)
	
	Для каждого ТекСтрока Из ТекСтрокаДерева.ПолучитьЭлементы() Цикл
		Элементы.Формы_ДеревоОбъектов.Развернуть(ТекСтрока.ПолучитьИдентификатор());
		
		Если ТекСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
			Формы_РазвернутьДерево(ТекСтрока);
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура Формы_ЗаполнитьНаСервере()
	
	ТекстОшибки = "";
	
	Попытка
		ДеревоМетаданныхКонфигурации = ОбменДаннымиПовтИсп.ПолучитьДеревоМетаданныхКонфигурации(Новый Структура);
	Исключение
		ТекстОшибки = НСтр("ru = 'Исключение при вызове ОбменДаннымиПовтИсп.ПолучитьДеревоМетаданныхКонфигурации() :
		                   |'") + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		Попытка
			ДеревоМетаданныхКонфигурации = ОбменДаннымиПовтИсп.МетаданныеКонфигурации(Новый Структура);
		Исключение
			
			ТекстОшибки = ТекстОшибки + НСтр("ru = '
			                                  |Исключение при вызове ОбменДаннымиПовтИсп.МетаданныеКонфигурации() :
			                                  |'")+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
	КонецЕсли; 
	
	НовоеДерево = ДеревоМетаданныхКонфигурации.Скопировать();
	
	Формы_ДополнитьДеревоФормами(НовоеДерево);
	
	Формы_ДеревоОбъектов.ПолучитьЭлементы().Очистить();
	
	ОбщегоНазначения.ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(Формы_ДеревоОбъектов.ПолучитьЭлементы(), НовоеДерево);
	
КонецПроцедуры 

&НаСервере
Процедура Формы_ДополнитьДеревоФормами(Дерево)
	
	МассивУдаления = Новый Массив();
	МассивУдаления.Добавить("Константы");
	МассивУдаления.Добавить("РегистрыСведений");
	МассивУдаления.Добавить("РегистрыНакопления");
	МассивУдаления.Добавить("РегистрыБухгалтерии");
	МассивУдаления.Добавить("РегистрыРасчета");
	МассивУдаления.Добавить("БизнесПроцессы");
	МассивУдаления.Добавить("Задачи");
	МассивУдаления.Добавить("ПланыВидовХарактеристик");
	МассивУдаления.Добавить("ПланыСчетов");
	МассивУдаления.Добавить("ПланыВидовРасчета");
	
	Для каждого ТекСтрока Из МассивУдаления Цикл
		Формы_УдалитьСтрокуВДереве(Дерево, ТекСтрока);
	КонецЦикла; 
	
	Дерево.Колонки.Добавить("ЭтоФорма",       Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("ПараметрыФормы", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Тестировать",    Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("ОсновнаяФорма",  Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Иерархический",  Новый ОписаниеТипов("Булево"));

	ЭлементыНаУдаление = Новый Массив();
	
	Для каждого ТекКласс Из Дерево.Строки Цикл
		
		Для каждого Элем Из ТекКласс.Строки Цикл
		
			МетаОбъект = Метаданные.НайтиПоПолномуИмени(Элем.ПолноеИмя);
			
			Попытка
				ФормыМетаОбъекта = МетаОбъект.Формы;
			Исключение
				ЭлементыНаУдаление.Добавить(Элем);
				Продолжить;
			КонецПопытки;
			
			Если ФормыМетаОбъекта.Количество() = 0 Тогда
				ЭлементыНаУдаление.Добавить(Элем);
			КонецЕсли;
			
			Для каждого ТекФорма Из ФормыМетаОбъекта Цикл
				
				Если НЕ Формы_ВключитьВТестирование(ТекФорма, МетаОбъект, ТекКласс) Тогда
					 Продолжить;
				КонецЕсли;
				
				ЭлементДерева = Элем.Строки.Добавить();
				ЭлементДерева.Имя = ТекФорма.Имя;
				ЭлементДерева.ПолноеИмя = ТекФорма.ПолноеИмя();
				ЭлементДерева.Картинка = БиблиотекаКартинок.Форма;
				ЭлементДерева.ЭтоФорма = Истина;
				ЭлементДерева.ОсновнаяФорма = Формы_ОпределитьОсновнаяФорма(ТекФорма, МетаОбъект, ТекКласс);
				
				Если ТекКласс.Имя = "Справочники" Тогда
					ЭлементДерева.Иерархический = МетаОбъект.Иерархический и МетаОбъект.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
				КонецЕсли;
				
				ЭлементДерева.Тестировать = Истина;
				
			КонецЦикла; 
		
		КонецЦикла; 
		
	КонецЦикла;
	
	Для каждого СтрокаУдалить Из ЭлементыНаУдаление Цикл
		
		Для каждого ТекКласс Из Дерево.Строки Цикл
			Попытка
				ТекКласс.Строки.Удалить(СтрокаУдалить);
			Исключение
			КонецПопытки;
		КонецЦикла; 
	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура Формы_УдалитьСтрокуВДереве(Дерево, СтрокаДерева)

	НайденнаяСтрока = Дерево.Строки.Найти(СтрокаДерева);
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Дерево.Строки.Удалить(НайденнаяСтрока);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция Формы_ВключитьВТестирование(ТекФорма, МетаОбъект, ТекКласс)

	Тестировать = Ложь;
	Если     МетаОбъект.ОсновнаяФормаДляВыбора = ТекФорма
	     ИЛИ МетаОбъект.ОсновнаяФормаСписка    = ТекФорма
	     ИЛИ МетаОбъект.ОсновнаяФормаОбъекта   = ТекФорма
	     ИЛИ (ТекКласс.Имя = "Справочники" И МетаОбъект.ОсновнаяФормаГруппы = ТекФорма)
	     ИЛИ Найти(ТекФорма.Имя, "Списк") <> 0 Тогда
	
		Тестировать = Истина;
	
	КонецЕсли;
	
	Возврат Тестировать;

КонецФункции 

&НаСервере
Процедура Формы_ВыполнитьВыборкуФорм(ФормыДляВыполненияТестирования)
	
	ДеревоЗначений = РеквизитФормыВЗначение("Формы_ДеревоОбъектов");
	
	Для каждого ТекКласс Из ДеревоЗначений.Строки Цикл
	
		Для каждого Элем Из ТекКласс.Строки Цикл
			
			Для каждого ТекФорма Из Элем.Строки Цикл
			
				Если ТекФорма.Тестировать и Не Формы_ЭтоИсключение(ТекФорма.ПолноеИмя) Тогда
					
					ПараметрыФормы = Новый Структура(ТекФорма.ПараметрыФормы);
					
					ФормыДляВыполненияТестирования.Добавить(Новый Структура("ИмяФормы,
																			|МассивСсылок,
																			|ПараметрыФормы",
																			ТекФорма.ПолноеИмя,
																			,
																			Новый Структура(ПараметрыФормы)));
				
					ФормыДляВыполненияТестирования[(ФормыДляВыполненияТестирования.ВГраница())].МассивСсылок = Новый Массив();
				
					ТаблицаВыборки = ТекКласс.Имя + "." + Элем.Имя;
					ТаблицаВыборки = СтрЗаменить(ТаблицаВыборки,"Справочники.", "Справочник.");
					ТаблицаВыборки = СтрЗаменить(ТаблицаВыборки,"Документы.", "Документ.");
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	Таб.Ссылка
						|ИЗ
						|	&Таб& КАК Таб";
						
					Если ТекКласс.Имя = "Справочники" и ТекФорма.Иерархический Тогда
						Запрос.Текст = 
							"ВЫБРАТЬ
							|	Таб.Ссылка
							|ИЗ
							|	&Таб& КАК Таб
							|ГДЕ 
							|	НЕ Таб.ЭтоГруппа";
					КонецЕсли;
						
					Если ТекКласс.Имя = "Справочники" и ТекФорма.Иерархический и ТекФорма.ОсновнаяФорма = "ОсновнаяФормаГруппы" Тогда
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	Таб.Ссылка
						|ИЗ
						|	&Таб& КАК Таб
						|ГДЕ 
						|	Таб.ЭтоГруппа";
					КонецЕсли;
					
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таб&", ТаблицаВыборки);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
					
					ВсегоСсылок = ВыборкаДетальныеЗаписи.Количество();
					
					ВсегоФорм = ?(ВсегоСсылок > Формы_КоличествоОбъектов, Формы_КоличествоОбъектов, ВсегоСсылок);
					n = 0;
					Пока n < ВсегоФорм Цикл
						ГСЧ = Новый ГенераторСлучайныхЧисел();
						ИндексФормы = ГСЧ.СлучайноеЧисло(n, ВсегоСсылок - 1);
						ФормыДляВыполненияТестирования[(ФормыДляВыполненияТестирования.ВГраница())].МассивСсылок.Добавить(ВыборкаДетальныеЗаписи[ИндексФормы].Ссылка);
						n = n + 1;
					КонецЦикла;
						
				КонецЕсли;
			
			КонецЦикла; 
		
		КонецЦикла; 
	
	КонецЦикла; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура Формы_ВыполнитьОткрытиеФорм(ФормыДляВыполненияТестирования)

	Для каждого ТекФорма Из ФормыДляВыполненияТестирования Цикл
		
		Если ТекФорма.МассивСсылок.Количество() <> 0 Тогда
		
			Для каждого Ключ Из ТекФорма.МассивСсылок Цикл
				
				ТекФорма.ПараметрыФормы.Вставить("Отбор", Новый Структура("Ключ", Ключ));
				
				Попытка
					Форма = ОткрытьФорму(ТекФорма.ИмяФормы,ТекФорма.ПараметрыФормы);
				Исключение
					НоваяСтрока_Информация = _Информация.Добавить();
					НоваяСтрока_Информация.ТипОшибки = "Формы";
					НоваяСтрока_Информация.ПроверямыйОбъект = ТекФорма.ИмяФормы;
					НоваяСтрока_Информация.Данные           = Ключ;
					НоваяСтрока_Информация.Описание         = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				КонецПопытки;
				
				Попытка
					Формы_ЗакрытьОткрывшиесяОкна(Форма);
					Форма.Модифицированность = Ложь;
					Форма.Закрыть();
				Исключение
				
				КонецПопытки;
			
			КонецЦикла; 
		
		КонецЕсли;
		
		Попытка
			Форма = ОткрытьФорму(ТекФорма.ИмяФормы,ТекФорма.ПараметрыФормы);
		Исключение
			НоваяСтрока_Информация = _Информация.Добавить();
			НоваяСтрока_Информация.ТипОшибки = "Формы";
			НоваяСтрока_Информация.ПроверямыйОбъект = ТекФорма.ИмяФормы;
			НоваяСтрока_Информация.Данные           = Ключ;
			НоваяСтрока_Информация.Описание         = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		Попытка
			Формы_ЗакрытьОткрывшиесяОкна(Форма);
			Форма.Модифицированность = Ложь;
			Форма.Закрыть();
		Исключение
			
		КонецПопытки;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура Формы_ЗакрытьОткрывшиесяОкна(ФормаТестируемогоОбъекта = Неопределено)
	
	ТекущееОкно = ЭтаФорма.Окно;
	
	ОкнаНаЗакрытие = Новый Массив;
	
	Окна = ПолучитьОкна();
	Для Икс = 0 По Окна.Количество() - 1 Цикл
		
		Если Окна[Икс] = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Окошко = Окна[Икс];
		
		Если ОткрытыеОкна.Найти(Окошко) <> Неопределено ИЛИ ТекущееОкно = Окошко Тогда
			Продолжить;
		КонецЕсли; 
		
		ОкнаНаЗакрытие.Добавить(Окошко);
		
	КонецЦикла; 
	
	Для Каждого Окошко Из ОкнаНаЗакрытие Цикл
		Для Каждого Форма Из Окошко.Содержимое Цикл
			
			Если Форма = ФормаТестируемогоОбъекта Тогда
				Продолжить;
			КонецЕсли; 
			
			Если Форма.Открыта() Тогда
				Форма.Закрыть();
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция Формы_ОпределитьОсновнаяФорма(ТекФорма, МетаОбъект,ТекКласс)

	Если ТекКласс.Имя = "Справочники" Тогда
		
		Если МетаОбъект.ОсновнаяФормаОбъекта = ТекФорма Тогда
			Возврат "ОсновнаяФормаОбъекта";
		ИначеЕсли МетаОбъект.ОсновнаяФормаСписка = ТекФорма Тогда
			Возврат "ОсновнаяФормаСписка";
		ИначеЕсли МетаОбъект.ОсновнаяФормаГруппы = ТекФорма Тогда
			Возврат "ОсновнаяФормаГруппы";
		ИначеЕсли МетаОбъект.ОсновнаяФормаДляВыбора = ТекФорма Тогда
			Возврат "ОсновнаяФормаДляВыбора";
		ИначеЕсли МетаОбъект.ОсновнаяФормаДляВыбораГруппы = ТекФорма Тогда
			Возврат "ОсновнаяФормаДляВыбораГруппы";
		КонецЕсли;
		
	ИначеЕсли ТекКласс.Имя = "Документы" Тогда
		
		Если МетаОбъект.ОсновнаяФормаОбъекта = ТекФорма Тогда
			Возврат "ОсновнаяФормаОбъекта";
		ИначеЕсли МетаОбъект.ОсновнаяФормаСписка = ТекФорма Тогда
			Возврат "ОсновнаяФормаСписка";
		ИначеЕсли МетаОбъект.ОсновнаяФормаДляВыбора = ТекФорма Тогда
			Возврат "ОсновнаяФормаДляВыбора";
		КонецЕсли;
	
	КонецЕсли;  
	
	Возврат Неопределено
	
КонецФункции

&НаСервере
Функция Формы_ЭтоИсключение(ИмяФормы)

	МассивИсключений = Новый Массив();
	
	Возврат МассивИсключений.Найти(ИмяФормы) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция Формы_СтруктураВСтрокуКлючЗначение(Знач Структура) Экспорт
	Возврат Формы_XSLT_СтруктураВСтрокуКлючЗначение(Формы_ЗначениеВСтрокуXML(Структура));
КонецФункции

&НаСервереБезКонтекста
Функция Формы_ЗначениеВСтрокуXML(Знач Значение)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(Новый ПараметрыЗаписиXML(, , Ложь, Ложь, ""));
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
	// Платформенный сериализатор позволяет записать в значение атрибутов перенос строки.
	Возврат СтрЗаменить(ЗаписьXML.Закрыть(), Символы.ПС, "&#10;");
	
КонецФункции

&НаСервереБезКонтекста
Функция Формы_XSLT_СтруктураВСтрокуКлючЗначение(Знач Текст)
	
	Преобразователь = Формы_XSLT_СтруктураВСтрокуКлючЗначениеПреобразователь();
	Возврат Преобразователь.ПреобразоватьИзСтроки(Текст);
	
КонецФункции

&НаСервереБезКонтекста
Функция Формы_XSLT_СтруктураВСтрокуКлючЗначениеПреобразователь() Экспорт
	Преобразователь = Новый ПреобразованиеXSL;
	Преобразователь.ЗагрузитьИзСтроки("
		|<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform""
		|  xmlns:tns=""http://v8.1c.ru/8.1/data/core""
		|>
		|<xsl:output method=""text"" encoding=""utf-8""/>
		|" + Формы_XSLT_ШаблоныСтроковыхФункций() + "
		|
		|  <xsl:template match=""/"">
		|    <xsl:apply-templates select=""//tns:Structure/tns:Property"" />
		|  </xsl:template>
		|
		|  <xsl:template match=""//tns:Property"">
		|
		|    <xsl:value-of select=""@name"" />
		|    <xsl:text/>=<xsl:text/>
		|
		|    <xsl:call-template name=""str-replace-all"">
		|      <xsl:with-param name=""str"" select=""tns:Value"" />
		|      <xsl:with-param name=""search-for"" select=""'&#10;'"" />
		|      <xsl:with-param name=""replace-by"" select=""'&#10;&#09;'"" />
		|    </xsl:call-template>
		|
		|    <xsl:if test=""position()!=last()"">
		|      <xsl:text/>
		|        <xsl:value-of select=""'&#10;'""/>
		|      <xsl:text/>
		|    </xsl:if>
		|  </xsl:template>
		|</xsl:stylesheet>
		|");
	Возврат Преобразователь;
КонецФункции

&НаСервереБезКонтекста
Функция Формы_XSLT_ШаблоныСтроковыхФункций()
	Возврат "
		|<!-- string functions -->
		|
		|  <xsl:template name=""str-trim-left"">
		|    <xsl:param name=""str"" />
		|    <xsl:variable name=""head"" select=""substring($str, 1, 1)""/>
		|    <xsl:variable name=""tail"" select=""substring($str, 2)""/>
		|    <xsl:choose>
		|      <xsl:when test=""(string-length($str) > 0) and (string-length(normalize-space($head)) = 0)"">
		|        <xsl:call-template name=""str-trim-left"">
		|          <xsl:with-param name=""str"" select=""$tail""/>
		|        </xsl:call-template>
		|      </xsl:when>
		|      <xsl:otherwise>
		|        <xsl:value-of select=""$str""/>
		|      </xsl:otherwise>
		|    </xsl:choose>
		|  </xsl:template>
		|
		|  <xsl:template name=""str-trim-right"">
		|    <xsl:param name=""str"" />
		|    <xsl:variable name=""head"" select=""substring($str, 1, string-length($str) - 1)""/>
		|    <xsl:variable name=""tail"" select=""substring($str, string-length($str))""/>
		|    <xsl:choose>
		|      <xsl:when test=""(string-length($str) > 0) and (string-length(normalize-space($tail)) = 0)"">
		|        <xsl:call-template name=""str-trim-right"">
		|          <xsl:with-param name=""str"" select=""$head""/>
		|        </xsl:call-template>
		|      </xsl:when>
		|      <xsl:otherwise>
		|        <xsl:value-of select=""$str""/>
		|      </xsl:otherwise>
		|    </xsl:choose>
		|  </xsl:template>
		|
		|  <xsl:template name=""str-trim-all"">
		|    <xsl:param name=""str"" />
		|      <xsl:call-template name=""str-trim-right"">
		|        <xsl:with-param name=""str"">
		|          <xsl:call-template name=""str-trim-left"">
		|            <xsl:with-param name=""str"" select=""$str""/>
		|          </xsl:call-template>
		|      </xsl:with-param>
		|    </xsl:call-template>
		|  </xsl:template>
		|
		|  <xsl:template name=""str-replace-all"">
		|    <xsl:param name=""str"" />
		|    <xsl:param name=""search-for"" />
		|    <xsl:param name=""replace-by"" />
		|    <xsl:choose>
		|      <xsl:when test=""contains($str, $search-for)"">
		|        <xsl:value-of select=""substring-before($str, $search-for)"" />
		|        <xsl:value-of select=""$replace-by"" />
		|        <xsl:call-template name=""str-replace-all"">
		|          <xsl:with-param name=""str"" select=""substring-after($str, $search-for)"" />
		|          <xsl:with-param name=""search-for"" select=""$search-for"" />
		|          <xsl:with-param name=""replace-by"" select=""$replace-by"" />
		|        </xsl:call-template>
		|      </xsl:when>
		|      <xsl:otherwise>
		|        <xsl:value-of select=""$str"" />
		|      </xsl:otherwise>
		|    </xsl:choose>
		|  </xsl:template>
		|
		|  <xsl:param name=""alpha-low"" select=""'абвгдеёжзийклмнопрстуфхцчшщыъьэюяabcdefghijklmnopqrstuvwxyz'"" />
		|  <xsl:param name=""alpha-up""  select=""'АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЫЪЬЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ'"" />
		|
		|  <xsl:template name=""str-upper"">
		|    <xsl:param name=""str"" />
		|    <xsl:value-of select=""translate($str, $alpha-low, $alpha-up)""/>
		|  </xsl:template>
		|
		|  <xsl:template name=""str-lower"">
		|    <xsl:param name=""str"" />
		|    <xsl:value-of select=""translate($str, alpha-up, $alpha-low)"" />
		|  </xsl:template>
		|
		|<!-- /string functions -->
		|";
КонецФункции

&НаСервереБезКонтекста
Процедура Формы_ДополнитьОписаниеОшибкиНаСервере(Ошибка) Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	Ошибка.Вставить("ВерсияПлатформы", СисИнфо.ВерсияПриложения);
	Ошибка.Вставить("СерверОперативнаяПамять", СисИнфо.ОперативнаяПамять);
	Ошибка.Вставить("СерверВерсияОС", СисИнфо.ВерсияОС);
	Ошибка.Вставить("СерверПроцессор", СисИнфо.Процессор);
	Ошибка.Вставить("СерверТипПлатформы", Строка(СисИнфо.ТипПлатформы));
	Ошибка.Вставить("СерверИнформацияПрограммыПросмотра", СисИнфо.ИнформацияПрограммыПросмотра);
	
	Ошибка.Вставить("ВерсияКонфигурации", Метаданные.Версия);
	Ошибка.Вставить("ИмяКонфигурации", Метаданные.Имя);
	Ошибка.Вставить("ДатаОбнаружения", ТекущаяДатаСеанса());
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция Формы_ТекстОшибкиXML(Ошибка) Экспорт
	
	Формы_ДополнитьОписаниеОшибкиНаСервере(Ошибка);
	
	Если ЗначениеЗаполнено(Ошибка.ОбъектМетаданных) ИЛИ ЗначениеЗаполнено(Ошибка.УточнениеРасположения) Тогда
		
		Ошибка.ОбъектыМетаданных.Добавить(Новый Структура("ОбъектМетаданных, УточнениеРасположения", Ошибка.ОбъектМетаданных, Ошибка.УточнениеРасположения));
		
	КонецЕсли; 
	
	Ошибка.Удалить("ОбъектМетаданных");
	Ошибка.Удалить("УточнениеРасположения");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Ошибка);
	
	Возврат ЗаписьXML.Закрыть()
	
КонецФункции

&НаКлиенте
Процедура Формы_Заполнить(Команда)
	
	Формы_ЗаполнитьНаСервере();
	
	_АктуализироватьФлажки(Формы_ДеревоОбъектов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Формы_ПроставитьЗначенияПодчиненных(Строка, Значение)
	
	Для Каждого ПодСтрока Из Строка.ПолучитьЭлементы() Цикл
		
		ПодСтрока.Тестировать = Значение;
		Если ПодСтрока.ПолучитьЭлементы().Количество() <> 0 Тогда
			Формы_ПроставитьЗначенияПодчиненных(ПодСтрока, Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура _АктуализироватьФлажки(Строка)
	
	ЕстьИстина = Ложь;
	ЕстьЛожь   = Ложь;
	
	Подчиненные = Строка.ПолучитьЭлементы();
	
	Если Подчиненные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 

	Для Каждого Подчиненная Из Подчиненные Цикл
		
		_АктуализироватьФлажки(Подчиненная);
		
		Если Подчиненная.Тестировать = 0 Тогда
			ЕстьЛожь = Истина;
		Иначе
			ЕстьИстина = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Строка = Печать_ДеревоОбъектов Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЕстьИстина И ЕстьЛожь Тогда
		Строка.Тестировать = 2;
	ИначеЕсли ЕстьИстина И ТипЗнч(Строка) <> Тип("ДанныеФормыДерево") Тогда
		Строка.Тестировать = 1;
	ИначеЕсли ТипЗнч(Строка) <> Тип("ДанныеФормыДерево") Тогда
		Строка.Тестировать = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать_ПроставитьВсеФлажки(Команда)
	
	Для Каждого СтрокаКорня Из Печать_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаМетаданного Из СтрокаКорня.ПолучитьЭлементы() Цикл
			
			Для Каждого СтрокаПечатнойФормы Из СтрокаМетаданного.ПолучитьЭлементы() Цикл
				
				СтрокаПечатнойФормы.Тестировать = ?(ЗначениеЗаполнено(СтрокаПечатнойФормы.ОбъектПечати), 1, 0);
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	_АктуализироватьФлажки(Печать_ДеревоОбъектов);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать_СнятьВсеФлажки(Команда)
	ПроставитьЗначениеВоВсеСтроки(Печать_ДеревоОбъектов, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура Печать_РазвернутьВсеГруппы(Команда)
	Для Каждого СтрокаДерева Из Печать_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Элементы.Печать_ДеревоОбъектов.Развернуть(СтрокаДерева.ПолучитьИдентификатор())
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Печать_СвернутьВсеГруппы(Команда)
	Для Каждого СтрокаДерева Из Печать_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Элементы.Печать_ДеревоОбъектов.Свернуть(СтрокаДерева.ПолучитьИдентификатор())
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура Печать_ЗаполнитьНаСервере()
	
	Попытка
	
		Печать_ЗаполнитьТаблицуПечатныхФорм();
		Печать_ПодобратьСсылкиОбъектовПечати();
		
	Исключение
		
		пСообщение = Новый СообщениеПользователю;
		пСообщение.Текст = ОписаниеОшибки();
		пСообщение.Сообщить();
		
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура Печать_Заполнить(Команда)
	Печать_ЗаполнитьНаСервере();
	
	Для Каждого СтрокаКорня Из Печать_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаМетаданного Из СтрокаКорня.ПолучитьЭлементы() Цикл
			
			Для Каждого СтрокаПечатнойФормы Из СтрокаМетаданного.ПолучитьЭлементы() Цикл
				
				СтрокаПечатнойФормы.Тестировать = ?(ЗначениеЗаполнено(СтрокаПечатнойФормы.ОбъектПечати), 1, 0);
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	_АктуализироватьФлажки(Печать_ДеревоОбъектов);

КонецПроцедуры

&НаСервере
Процедура Печать_ЗаполнитьТаблицуПечатныхФорм()	
	
	СписокДляСортировки = Новый СписокЗначений;
	СписокДляСортировки.ЗагрузитьЗначения(УправлениеПечатью.ИсточникиКомандПечати());
	СписокДляСортировки.СортироватьПоЗначению();
	ИсточникиКомандПечати = СписокДляСортировки.ВыгрузитьЗначения();
	УзлыТиповМетаданных   = Печать_ДеревоОбъектов.ПолучитьЭлементы();
	
	УзлыТиповМетаданных.Очистить();
	
	СтрокаСправочники = УзлыТиповМетаданных.Добавить();
	СтрокаСправочники.Тестировать   = Истина;
	СтрокаСправочники.ЭтоГруппа     = Истина;
	СтрокаСправочники.Представление = "Справочники";
	УзлыСправочника = СтрокаСправочники.ПолучитьЭлементы();
	
	СтрокаДокументы = УзлыТиповМетаданных.Добавить();
	СтрокаДокументы.Тестировать   = Истина;
	СтрокаДокументы.ЭтоГруппа     = Истина;
	СтрокаДокументы.Представление = "Документы";
	УзлыДокументов = СтрокаДокументы.ПолучитьЭлементы();
	
	ПодходящиеИсточникиКоманд = Новый Массив;
	Для Каждого Источник Из ИсточникиКомандПечати Цикл
		
		Если НРег(Лев(Источник.Имя,7)) = "удалить" Тогда
			Продолжить;
		КонецЕсли;
		
		// Доп проверка на случай, когда команды печати возможны, но не подключены
		КомандыПечати = УправлениеПечатью.КомандыПечатиОбъекта(Источник);
		Если КомандыПечати.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Мы не можем автоматически проверить печатные формы, 
		// если в команде указан обработчик
		КоличествоКомандБезОбработчиков = 0;
		Для Каждого КомандаПечати Из КомандыПечати Цикл
			Если Не ЗначениеЗаполнено(КомандаПечати.Обработчик) Тогда
				КоличествоКомандБезОбработчиков = КоличествоКомандБезОбработчиков + 1;
			КонецЕсли; 
		КонецЦикла;
		
		Если КоличествоКомандБезОбработчиков = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если Метаданные.Справочники.Содержит(Источник) Тогда
			
			СтрокаОбъектаМетаданных = УзлыСправочника.Добавить();
			НачалоИмениИсточника    = "Справочник.";
			
		ИначеЕсли Метаданные.Документы.Содержит(Источник) Тогда
			
			СтрокаОбъектаМетаданных = УзлыДокументов.Добавить();
			НачалоИмениИсточника    = "Документ.";
		Иначе 
			Продолжить;
		КонецЕсли;
		
		СтрокаОбъектаМетаданных.Тестировать   = Истина;
		СтрокаОбъектаМетаданных.ЭтоГруппа     = Истина;
		СтрокаОбъектаМетаданных.Представление = Источник.Синоним;
		СтрокаОбъектаМетаданных.ИмяИсточника  = НачалоИмениИсточника + Источник.Имя;
		
		УзлыМетаданного = СтрокаОбъектаМетаданных.ПолучитьЭлементы();
		Для Каждого КомандаПечати Из КомандыПечати Цикл
			
			Если ЗначениеЗаполнено(КомандаПечати.Обработчик) Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаКоманды = УзлыМетаданного.Добавить();
			СтрокаКоманды.Тестировать   = Истина;
			СтрокаКоманды.ЭтоГруппа     = Ложь;
			СтрокаКоманды.Представление = КомандаПечати.Представление;
			СтрокаКоманды.ИмяИсточника  = СтрокаОбъектаМетаданных.ИмяИсточника;
			СтрокаКоманды.МенеджерПечати          = КомандаПечати.МенеджерПечати;
			СтрокаКоманды.Идентификатор           = КомандаПечати.Идентификатор;
			СтрокаКоманды.ДополнительныеПараметры = КомандаПечати.ДополнительныеПараметры;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Печать_ПодобратьСсылкиОбъектовПечати()
	
	Запрос = Новый Запрос;
	
	Для Каждого СтрокаТипов Из Печать_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаОбъектов Из СтрокаТипов.ПолучитьЭлементы() Цикл
			
			ИмяИсточника            = СтрокаОбъектов.ИмяИсточника;
			ПодстрокиИдентификатора = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяИсточника, ".");
			
			Если ПодстрокиИдентификатора.Количество() > 1 Тогда
				ИмяОбъекта = ПодстрокиИдентификатора[0];
				ИмяТаблицы = ПодстрокиИдентификатора[1];
			Иначе 
				Продолжить;
			КонецЕсли;
			
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	%1.Ссылка
			|ИЗ
			|	%2 КАК %1
			|ГДЕ
			|	НЕ %1.ПометкаУдаления
			|	" + ?(ИмяОбъекта = "Документ", "И %1.Проведен УПОРЯДОЧИТЬ ПО %1.Дата Убыв", "");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", ИмяТаблицы);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%2", ИмяИсточника);
			
			Попытка
				
				Результат = Запрос.Выполнить();
				Если Не Результат.Пустой() Тогда
					
					Выборка = Результат.Выбрать();
					Выборка.Следующий();
					СтрокаОбъектов.ОбъектПечати = Выборка.Ссылка;
					
				Иначе 
					
					Если ИмяОбъекта = "Справочник" Тогда
						СтрокаОбъектов.ОбъектПечати = Справочники[ИмяТаблицы].ПустаяСсылка();
					ИначеЕсли ИмяОбъекта = "Документ" Тогда
						СтрокаОбъектов.ОбъектПечати = Документы[ИмяТаблицы].ПустаяСсылка();
					КонецЕсли; 
					
				КонецЕсли; 
				
			Исключение
			КонецПопытки;

			
			Для Каждого СтрокаПечатныхФорм Из СтрокаОбъектов.ПолучитьЭлементы() Цикл
				
				СтрокаПечатныхФорм.ОбъектПечати = СтрокаОбъектов.ОбъектПечати;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПечатныеФормыКТестированиюТестироватьПриИзменении(Элемент)
	
	ТекущаяСтрокаДерева = Элементы.Печать_ДеревоОбъектов.ТекущиеДанные;
	
	Если ТекущаяСтрокаДерева.Тестировать = 2 Тогда
		ТекущаяСтрокаДерева.Тестировать = 0;
	КонецЕсли;
	
	ПроставитьЗначениеВоВсеСтроки(ТекущаяСтрокаДерева, ТекущаяСтрокаДерева.Тестировать);
	
	АктуализироватьРодителя(ТекущаяСтрокаДерева);

КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьРодителя(Строка)

	СтрокаРодитель = Строка.ПолучитьРодителя();
	
	Если СтрокаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьИстина = Ложь;
	ЕстьЛожь   = Ложь;
	Для Каждого Подчиненная Из СтрокаРодитель.ПолучитьЭлементы() Цикл
	
		Если Подчиненная.Тестировать = 0 Тогда
			ЕстьЛожь = Истина;
		Иначе
			ЕстьИстина = Истина;
		КонецЕсли;
		
	КонецЦикла; 
	
	Если ЕстьИстина И ЕстьЛожь Тогда
		СтрокаРодитель.Тестировать = 2;
	ИначеЕсли ЕстьИстина Тогда
		СтрокаРодитель.Тестировать = 1;
	Иначе
		СтрокаРодитель.Тестировать = 0;
	КонецЕсли;
	
	АктуализироватьРодителя(СтрокаРодитель);

КонецПроцедуры

&НаКлиенте
Процедура ПечатныеФормыКТестированиюОбъектПечатиПриИзменении(Элемент)
	
	ТекущаяСтрокаДерева = Элементы.Печать_ДеревоОбъектов.ТекущиеДанные;
	
	Если ТекущаяСтрокаДерева.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ТекущаяСтрокаДерева.ПолучитьЭлементы() Цикл
		Строка.ОбъектПечати = ТекущаяСтрокаДерева.ОбъектПечати;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗаглавныеБуквыИзСтроки(ИсходнаяСтрока)
	
	СтрокаШаблон = НРег(ИсходнаяСтрока);
	СтрокаРезультат = "";
	
	Для Сч = 1 По СтрДлина(ИсходнаяСтрока) Цикл 
		СимволШаблона = Сред(СтрокаШаблон,Сч,1);
		СимволИсходной = Сред(ИсходнаяСтрока,Сч,1);
		
		Если СимволШаблона <> СимволИсходной Тогда
			СтрокаРезультат = СтрокаРезультат + СимволИсходной;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаРезультат;
КонецФункции

&НаКлиенте
Процедура ПроставитьЗначениеВоВсеСтроки(Узел, Значение)
	
	Для Каждого Строка Из Узел.ПолучитьЭлементы() Цикл
		
		Строка.Тестировать = Значение;
		ПроставитьЗначениеВоВсеСтроки(Строка, Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Печать_СформироватьФайлПечатнойФормы(Параметры, ПрефиксФайла = "")
	
	Идентификатор           = Параметры.Идентификатор;
	МенеджерПечати          = Параметры.МенеджерПечати;
	ДополнительныеПараметры = Параметры.ДополнительныеПараметры;
	ИмяИсточника            = Параметры.ИмяИсточника;
	ОбъектПечати            = Параметры.ОбъектПечати;
	Представление           = Параметры.Представление;
	
	Если МенеджерПечати = "СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки"
		И Найти(Идентификатор, "ВнешняяПечатнаяФорма.") = 0 Тогда
		Идентификатор = "ВнешняяПечатнаяФорма." + Идентификатор;
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(ОбъектПечати);
	
	ПараметрыПечати = ?(Параметры.Свойство("ДополнительныеПараметры"), Параметры.ДополнительныеПараметры,
	                                                                   Новый Структура);
	Попытка
		
		ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормы(МенеджерПечати, Идентификатор,
			МассивОбъектов, ПараметрыПечати);
		
	Исключение
		
		НоваяСтрока_Информация = _Информация.Добавить();
		НоваяСтрока_Информация.ТипОшибки = "Печать";
		НоваяСтрока_Информация.ПроверямыйОбъект = ИмяИсточника;
		НоваяСтрока_Информация.Данные           = ОбъектПечати;
		НоваяСтрока_Информация.Описание         = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

	КонецПопытки; 
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытиеФорм_ДеревоОбъектовТестироватьПриИзменении(Элемент)
	
	ТекущаяСтрокаДерева = Элементы.Формы_ДеревоОбъектов.ТекущиеДанные;
	
	Если ТекущаяСтрокаДерева.Тестировать = 2 Тогда
		ТекущаяСтрокаДерева.Тестировать = 0;
	КонецЕсли;
	
	ПроставитьЗначениеВоВсеСтроки(ТекущаяСтрокаДерева, ТекущаяСтрокаДерева.Тестировать);
	
	АктуализироватьРодителя(ТекущаяСтрокаДерева);
	
КонецПроцедуры

&НаКлиенте
Процедура _Информация_Очистить(Команда)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса_Информация_Очистить", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Очистить информацию?';"
	+ " en = 'Do you want to continue?'"), Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса_Информация_Очистить(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	_Информация.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура Отчеты_Заполнить(Команда)
	
	Отчеты_ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура Отчеты_ЗаполнитьНаСервере()
	
	Попытка
		
		Отчеты_ЗаполнитьТаблицуОтчетов();
		Отчеты_ПроставитьЗначениеВоВсеСтроки(Отчеты_ДеревоОбъектов, Истина);
		
	Исключение
		
		пСообщение = Новый СообщениеПользователю;
		пСообщение.Текст = ОписаниеОшибки();
		пСообщение.Сообщить();
		
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура Отчеты_ПроставитьВсеФлажки(Команда)
	Отчеты_ПроставитьЗначениеВоВсеСтроки(Отчеты_ДеревоОбъектов, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Отчеты_СнятьВсеФлажки(Команда)
	Отчеты_ПроставитьЗначениеВоВсеСтроки(Отчеты_ДеревоОбъектов, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура Отчеты_РазвернутьВсеГруппы(Команда)
	Для Каждого СтрокаДерева Из Отчеты_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Элементы.Отчеты_ДеревоОбъектов.Развернуть(СтрокаДерева.ПолучитьИдентификатор())
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Отчеты_СвернутьВсеГруппы(Команда)
	Для Каждого СтрокаДерева Из Отчеты_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Элементы.Отчеты_ДеревоОбъектов.Свернуть(СтрокаДерева.ПолучитьИдентификатор())
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Отчеты_ПроставитьЗначениеВоВсеСтроки(Узел, Значение)
	
	Для Каждого Строка Из Узел.ПолучитьЭлементы() Цикл
		
		Строка.Тестировать = Значение;
		Отчеты_ПроставитьЗначениеВоВсеСтроки(Строка, Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Отчеты_ЗаполнитьТаблицуОтчетов()
	
	ДоступныеОтчеты     = ВариантыОтчетовПовтИсп.ДоступныеОтчеты();
	НедоступныеВарианты = ВариантыОтчетовПовтИсп.ОтключенныеВариантыПрограммы();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ВариантыОтчетов.Отчет.Ссылка КАК Справочник.ИдентификаторыОбъектовМетаданных) КАК Отчет,
	|	ВариантыОтчетов.Настройки,
	|	ВариантыОтчетов.ХешНастроек,
	|	ВариантыОтчетов.Ссылка КАК ВариантОтчета,
	|	ВариантыОтчетов.КлючВарианта
	|ПОМЕСТИТЬ ВременнаяТаблицаОтчетов
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ
	|	И НЕ ВариантыОтчетов.Ссылка В (&НедоступныеВарианты)
	|	И ВариантыОтчетов.Отчет В(&ДоступныеОтчеты)
	|	И (ВЫРАЗИТЬ(ВариантыОтчетов.ПредопределенныйВариант КАК Справочник.ПредопределенныеВариантыОтчетов).Включен = ИСТИНА
	|			ИЛИ ВариантыОтчетов.ПредопределенныйВариант = ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетов.ПустаяСсылка)
	|			<%ДопУсловие>)
	|	И ВариантыОтчетов.КлючВарианта <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаОтчетов.Отчет КАК Отчет,
	|	ВременнаяТаблицаОтчетов.ВариантОтчета КАК ВариантОтчета,
	|	ВременнаяТаблицаОтчетов.ХешНастроек КАК ХешНастроек,
	|	ВременнаяТаблицаОтчетов.Отчет.Синоним КАК НаименованиеОтчета,
	|	ВременнаяТаблицаОтчетов.ВариантОтчета.Наименование КАК НаименованиеВарианта,
	|	ВременнаяТаблицаОтчетов.Настройки,
	|	ВременнаяТаблицаОтчетов.КлючВарианта,
	|	ВременнаяТаблицаОтчетов.Отчет.Имя КАК ИмяОтчета
	|ИЗ
	|	ВременнаяТаблицаОтчетов КАК ВременнаяТаблицаОтчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВременнаяТаблицаОтчетов.Отчет.Наименование,
	|	ВременнаяТаблицаОтчетов.ВариантОтчета.Наименование";
	
	ЕстьПредопределнныеВарианты = Метаданные.Справочники.Найти("ПредопределенныеВариантыОтчетовРасширений") <> Неопределено;
	
	Если ЕстьПредопределнныеВарианты Тогда
		ДопУсловие = " ИЛИ ВариантыОтчетов.ПредопределенныйВариант = ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка)";
	Иначе 
		ДопУсловие = "";
	КонецЕсли; 
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "<%ДопУсловие>", ДопУсловие);
	
	Запрос.УстановитьПараметр("ДоступныеОтчеты",    ДоступныеОтчеты);
	Запрос.УстановитьПараметр("НедоступныеВарианты",НедоступныеВарианты);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	КорневыеУзлы = Отчеты_ДеревоОбъектов.ПолучитьЭлементы();
	КорневыеУзлы.Очистить();
	
	ТекущийОтчет          = Неопределено;
	ЭлементыКорневогоУзла = Неопределено;
	Пока РезультатЗапроса.Следующий() Цикл
		
		Если ТекущийОтчет <> РезультатЗапроса.Отчет Тогда
		
			ТекущийОтчет = РезультатЗапроса.Отчет;
			СтрокаГруппы = КорневыеУзлы.Добавить();
			
			СтрокаГруппы.ОтчетВариант  = РезультатЗапроса.Отчет;
			СтрокаГруппы.Представление = РезультатЗапроса.НаименованиеОтчета;
			СтрокаГруппы.ЭтоГруппа     = Истина;
			
			ЭлементыКорневогоУзла = СтрокаГруппы.ПолучитьЭлементы();

		КонецЕсли; 
		
		СтрокаВарианта = ЭлементыКорневогоУзла.Добавить();
		СтрокаВарианта.ОтчетВариант  = РезультатЗапроса.ВариантОтчета;
		СтрокаВарианта.ОтчетВладелец = РезультатЗапроса.Отчет;
		СтрокаВарианта.Представление = РезультатЗапроса.НаименованиеВарианта +" ("+РезультатЗапроса.КлючВарианта+")";
		ЗаполнитьЗначенияСвойств(СтрокаВарианта,РезультатЗапроса,"ХешНастроек,Настройки,КлючВарианта,ИмяОтчета");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Отчеты_СформироватьФайлОтчета(Параметры)
	
	Попытка
		Отчет = Отчеты[Параметры.ИмяОтчета].Создать();
	Исключение
		
		НоваяСтрока_Информация = _Информация.Добавить();
		НоваяСтрока_Информация.ТипОшибки = "Отчеты";
		НоваяСтрока_Информация.ПроверямыйОбъект = "Отчет." + Параметры.ИмяОтчета;
		НоваяСтрока_Информация.Данные           = Неопределено;
		НоваяСтрока_Информация.Описание         = "Ошибка при попытке создать объект отчета " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Возврат;
		
	КонецПопытки;
	
	СхемаКомпоновкиДанных = Отчет.СхемаКомпоновкиДанных;
	
	Попытка
		КомпоновщикНастроек   = Отчет.КомпоновщикНастроек;
	Исключение
		
		НоваяСтрока_Информация = _Информация.Добавить();
		НоваяСтрока_Информация.ТипОшибки = "Отчеты";
		НоваяСтрока_Информация.ПроверямыйОбъект = "Отчет." + Параметры.ИмяОтчета;
		НоваяСтрока_Информация.Данные           = Неопределено;
		НоваяСтрока_Информация.Описание         = "Ошибка при попытке скомпоновать отчет " 
		+ Символы.ПС + Строка(ПолучитьНавигационнуюСсылку(Параметры.ОтчетВариант)) 
		+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

		Возврат;
		
	КонецПопытки;
	
	//Получение и загрузка настроек варианта отчета
	Если Параметры.ХешНастроек <> "" Тогда
		ПользовательскиеНастройки = Параметры.Настройки.Получить();
		КомпоновщикНастроек.ЗагрузитьНастройки(ПользовательскиеНастройки);
	Иначе
		НастройкиВарианта = Отчеты_НайтиНастройкиВарианта(СхемаКомпоновкиДанных, Параметры.КлючВарианта);
		Если НастройкиВарианта = Неопределено Тогда
			
			НоваяСтрока_Информация = _Информация.Добавить();
			НоваяСтрока_Информация.ТипОшибки = "Отчеты";
			НоваяСтрока_Информация.ПроверямыйОбъект = "Отчет." + Параметры.ИмяОтчета;
			НоваяСтрока_Информация.Данные           = Неопределено;
			НоваяСтрока_Информация.Описание         = "Ошибка при получении настроек варианта отчета " + Строка(ПолучитьНавигационнуюСсылку(Параметры.ОтчетВариант));
			
			Возврат;
		КонецЕсли;
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиВарианта);
	КонецЕсли;
	
	Фильтр = Новый Структура;
	Фильтр.Вставить("КлючОбъекта",  Параметры.ИмяОтчета + "/" + Параметры.КлючВарианта);
	Фильтр.Вставить("Пользователь", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	
	ВыборкаНастроек = ХранилищеПользовательскихНастроекОтчетов.Выбрать(Фильтр);
	Если ВыборкаНастроек.Следующий() Тогда
		ПользовательскиеНастройки = ВыборкаНастроек.Настройки;
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
	Иначе
		
		КлючОбъекта = "Отчет." + Параметры.ИмяОтчета + "/" + Параметры.КлючВарианта + "/ТекущиеПользовательскиеНастройки";
		ВыборкаТекущихНастроек = ХранилищеСистемныхНастроек.Выбрать(Новый Структура("КлючОбъекта", КлючОбъекта));
		Если ВыборкаТекущихНастроек.Следующий() Тогда
			ПользовательскиеНастройки = ВыборкаТекущихНастроек.Настройки;
			КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
		КонецЕсли;
		
	КонецЕсли;
	
	ДопСвойства = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ДопСвойства.Вставить("КлючВарианта", Параметры.КлючВарианта);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ИнформацияРасшифровки = Неопределено;
		Отчет.СкомпоноватьРезультат(ТабличныйДокумент, ИнформацияРасшифровки);
	Исключение
		
		НоваяСтрока_Информация = _Информация.Добавить();
		НоваяСтрока_Информация.ТипОшибки = "Отчеты";
		НоваяСтрока_Информация.ПроверямыйОбъект = "Отчет." + Параметры.ИмяОтчета;
		НоваяСтрока_Информация.Данные           = Неопределено;
		НоваяСтрока_Информация.Описание         = "Ошибка при попытке скомпоновать отчет " 
		+ Символы.ПС + Строка(ПолучитьНавигационнуюСсылку(Параметры.ОтчетВариант)) 
		+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Отчеты_НайтиНастройкиВарианта(СхемаКомпоновкиДанных,ИмяВарианта)
	
	НастройкиВарианта = Неопределено;
	Для Каждого Вариант Из СхемаКомпоновкиДанных.ВариантыНастроек Цикл
		Если Вариант.Имя = ИмяВарианта Тогда
			НастройкиВарианта = Вариант.Настройки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НастройкиВарианта;
	
КонецФункции

&НаКлиенте
Процедура Справочники_УстановитьФлажки(Команда)
	
	Справочники_ПроставитьЗначенияПодчиненных(Справочники_ДеревоОбъектов, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Справочники_СнятьФлажки(Команда)
	
	Справочники_ПроставитьЗначенияПодчиненных(Справочники_ДеревоОбъектов, Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Справочники_ПроставитьЗначенияПодчиненных(Строка, Значение)
	
	Для Каждого ПодСтрока Из Строка.ПолучитьЭлементы() Цикл
		
		ПодСтрока.Тестировать = Значение;
		Если ПодСтрока.ПолучитьЭлементы().Количество() <> 0 Тогда
			Справочники_ПроставитьЗначенияПодчиненных(ПодСтрока, Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Справочники_ПротестироватьПоТиповымНастройкам()
	
	ОбъектыКТиповомуТестированию = Справочники_ПолучитьОбъектыКТиповомуТестированию(Справочники_ДеревоОбъектов);
	
	// Соответствие, в котором будут сохранены количества ссылок для соответствующих объектов
	// метаданных в случае, если используется ограничение по времени тестирования
	ОбъектыДляТестированияНаСервере = Новый Соответствие;
	
	Для Каждого ТестируемыйОбъект Из ОбъектыКТиповомуТестированию Цикл
		
		// Заполнение массива тестируемых ссылок в зависимости от настроек
		Если ЗначениеЗаполнено(Справочники_КоличествоОбъектов) Тогда
			ТестируемыеСсылки = Справочники_ПолучитьСлучайныеСсылкиПоКоличеству(ТестируемыйОбъект,Справочники_КоличествоОбъектов);
		КонецЕсли;
		
		Для Каждого ТестируемаяСсылка Из ТестируемыеСсылки Цикл
			
			ЕстьОшибки = Справочники_ПротестироватьОбъектПоСсылкеНаКлиенте(ТестируемыйОбъект,ТестируемаяСсылка);
			
			Если ЕстьОшибки = Ложь Тогда
				Если ОбъектыДляТестированияНаСервере[ТестируемыйОбъект] = Неопределено Тогда
					ОбъектыДляТестированияНаСервере[ТестируемыйОбъект] = Новый Массив;
				КонецЕсли;
				ОбъектыДляТестированияНаСервере[ТестируемыйОбъект].Добавить(ТестируемаяСсылка);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Справочники_ПротестироватьЗаписьОбъектовНаСервере(ОбъектыДляТестированияНаСервере);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Справочники_ПолучитьОбъектыКТиповомуТестированию(ДеревоОбъектов)
	
	МассивСтрок = Справочники_ПолучитьМассивПодчиненных(ДеревоОбъектов);
	Результат   = Новый Массив;
	
	Для Каждого Стр Из МассивСтрок Цикл
		
		Если Стр.Тестировать = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.КоличествоСсылок  = 0 
		   И Стр.ПроцентПокрытия   = 0 
		   И Стр.ВремяТестирования = 0 
		   И ЗначениеЗаполнено(Стр.ПолноеИмя) Тогда
			
			Результат.Добавить(Стр.ПолноеИмя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Справочники_РазвернутьВсеГруппы(Команда)
	Для Каждого СтрокаДерева Из Справочники_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Элементы.Справочники_ДеревоОбъектов.Развернуть(СтрокаДерева.ПолучитьИдентификатор())
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Справочники_СвернутьВсеГруппы(Команда)
	Для Каждого СтрокаДерева Из Справочники_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Элементы.Справочники_ДеревоОбъектов.Свернуть(СтрокаДерева.ПолучитьИдентификатор())
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Справочники_Заполнить(Команда)
	
	Справочники_СформироватьДеревоМетаданных();
	Справочники_ПроставитьЗначенияПодчиненных(Справочники_ДеревоОбъектов, Истина);

КонецПроцедуры

&НаСервере
Процедура Справочники_СформироватьДеревоМетаданных()
	
	КоллекцииОбъектовМетаданных = Новый ТаблицаЗначений;
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Имя");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Синоним");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Картинка");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("КартинкаОбъекта");
	
	Справочники_НоваяСтрокаКоллекцииОбъектовМетаданных("Справочники",             НСтр("ru = 'Справочники'"),               БиблиотекаКартинок.Справочник,             БиблиотекаКартинок.Справочник,                   КоллекцииОбъектовМетаданных);
	Справочники_НоваяСтрокаКоллекцииОбъектовМетаданных("ПланыВидовХарактеристик", НСтр("ru = 'Планы видов характеристик'"), БиблиотекаКартинок.ПланВидовХарактеристик, БиблиотекаКартинок.ПланВидовХарактеристикОбъект, КоллекцииОбъектовМетаданных);
	Справочники_НоваяСтрокаКоллекцииОбъектовМетаданных("ПланыВидовРасчета",       НСтр("ru = 'Планы видов расчета'"),       БиблиотекаКартинок.ПланВидовРасчета,       БиблиотекаКартинок.ПланВидовХарактеристикОбъект, КоллекцииОбъектовМетаданных);
	
	ЭлементыДерева = Справочники_ДеревоОбъектов.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	Для Каждого СтрокаКоллекции Из КоллекцииОбъектовМетаданных Цикл
		
		СтрокаДерева   = ЭлементыДерева.Добавить();
		ЭлементыСтроки = СтрокаДерева.ПолучитьЭлементы();
		
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаКоллекции);
		
		Для Каждого ОбъектМетаданных Из Метаданные[СтрокаКоллекции.Имя] Цикл
			
			СтрокаДереваОМ = ЭлементыСтроки.Добавить();
			СтрокаДереваОМ.Имя       = ОбъектМетаданных.Имя;
			СтрокаДереваОМ.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			СтрокаДереваОМ.Синоним   = ОбъектМетаданных.Синоним;
			СтрокаДереваОМ.Картинка  = СтрокаКоллекции.КартинкаОбъекта;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура Справочники_НоваяСтрокаКоллекцииОбъектовМетаданных(Имя, Синоним, Картинка, КартинкаОбъекта, Таб)
	
	НоваяСтрока = Таб.Добавить();
	НоваяСтрока.Имя               = Имя;
	НоваяСтрока.Синоним           = Синоним;
	НоваяСтрока.Картинка          = Картинка;
	НоваяСтрока.КартинкаОбъекта   = КартинкаОбъекта;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Справочники_ПолучитьМассивПодчиненных(ДанныеФормыДерево, Результат = Неопределено)
	
	Если Результат = Неопределено Тогда
		Результат = Новый Массив;
	КонецЕсли; 
	
	Для Каждого ЭлементДерева Из ДанныеФормыДерево.ПолучитьЭлементы() Цикл
		Результат.Добавить(ЭлементДерева);
		Справочники_ПолучитьМассивПодчиненных(ЭлементДерева, Результат);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура Справочники_ПротестироватьЗаписьОбъектовНаСервере(ОбъектыИСсылки)
	
	Для Каждого ПараКЗ Из ОбъектыИСсылки Цикл
		
		ИмяОбъектаМетаданных = ПараКЗ.Ключ;
		МассивСсылок = ПараКЗ.Значение;
		
		Для Каждого ТестируемаяСсылка Из МассивСсылок Цикл
			Справочники_ПротестироватьЗаписьОбъектаНаСервере(ТестируемаяСсылка);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Справочники_ПротестироватьЗаписьОбъектаНаСервере(СсылкаНаОбъект)
	
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект);
	
	ОбъектПоСсылке = СсылкаНаОбъект.ПолучитьОбъект();
	
	Метаданное     = Метаданные.НайтиПоТипу(ТипЗнч(СсылкаНаОбъект));
	ИмяМетаданного = ?(Метаданное <> Неопределено, Метаданное.ПолноеИмя(), Строка(СсылкаНаОбъект));
	
	Попытка
		ОбъектПоСсылке.Записать();
	Исключение
		НоваяСтрока_Информация = _Информация.Добавить();
		НоваяСтрока_Информация.ТипОшибки = "Справочники";
		НоваяСтрока_Информация.ПроверямыйОбъект = ОбъектПоСсылке.Метаданные().ПолноеИмя();
		НоваяСтрока_Информация.Данные           = СсылкаНаОбъект;
		НоваяСтрока_Информация.Описание         = "Ошибка при перезаписи объекта на сервере " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Справочники_ПолучитьСлучайныеСсылкиПоКоличеству(ИмяОбъектаМетаданных,КоличествоСсылок)
	
	ОтсеиватьГруппы = Справочники_ОтсеиватьГруппы(ИмяОбъектаМетаданных);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АнализируемыйОбъект.Ссылка Как Ссылка
	|ИЗ
	|	%ОбъектМетаданных% КАК АнализируемыйОбъект
	|ГДЕ
	|	НЕ АнализируемыйОбъект.ПометкаУдаления
	|	И [УсловиеГруппа]";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ОбъектМетаданных%",ИмяОбъектаМетаданных);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "[УсловиеГруппа]",?(ОтсеиватьГруппы,"АнализируемыйОбъект.ЭтоГруппа = ЛОЖЬ","ИСТИНА"));
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Справочники_ВыбратьСлучайныеЭлементыМассива(МассивСсылок,КоличествоСсылок);
	
КонецФункции

&НаКлиенте
Функция Справочники_ПротестироватьОбъектПоСсылкеНаКлиенте(ИмяОбъектаМетаданных, Ссылка)
	
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Ссылка);
	ПараметрыОткрытия   = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", Ссылка);
	
	// Обход проблемы с пустыми навигационными ссылками
	Если Не ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		НавигационнаяСсылка = Строка(Ссылка)
	КонецЕсли;
	
	ИмяФормыТестирования = ИмяОбъектаМетаданных + ".ФормаОбъекта";
	
	Попытка
		Форма = ОткрытьФорму(ИмяФормыТестирования, ПараметрыОткрытия);
	Исключение
		
		НоваяСтрока_Информация = _Информация.Добавить();
		НоваяСтрока_Информация.ТипОшибки = "Справочники";
		НоваяСтрока_Информация.ПроверямыйОбъект = Справочники_ПолучитьИмяОсновнойФормыОбъектаОбъектаМетаданных(ИмяОбъектаМетаданных);
		НоваяСтрока_Информация.Данные           = Ссылка;
		НоваяСтрока_Информация.Описание         = ИмяФормыТестирования 
		+ Символы.ПС + НСтр("ru = 'Открыть форму объекта по ссылке : '") + НавигационнаяСсылка 
		+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Справочники_ЗакрытьОткрывшиесяОкна(Форма);
	
	// Окно не открылось
	// Возможно в обработчиках ПриСоздании или ПриОткрытии, флаг Отказ = Истина
	Если Форма = Неопределено ИЛИ Форма.Окно = Неопределено Тогда
		
		Ошибка = НСтр("ru = 'Объект метаданных: %1
		                |При попытке открыть форму, окно не было открыто.
		                |Навигационная ссылка: %2'");
		Ошибка = СтрЗаменить(Ошибка, "%1", ИмяФормыТестирования);
		Ошибка = СтрЗаменить(Ошибка, "%2", НавигационнаяСсылка);
		
		НоваяСтрока_Информация = _Информация.Добавить();
		НоваяСтрока_Информация.ТипОшибки = "Справочники";
		НоваяСтрока_Информация.ПроверямыйОбъект = Справочники_ПолучитьИмяОсновнойФормыОбъектаОбъектаМетаданных(ИмяОбъектаМетаданных);
		НоваяСтрока_Информация.Данные           = Ссылка;
		НоваяСтрока_Информация.Описание         = Ошибка;
		
		Возврат Истина;
		
	КонецЕсли; 
	
	Попытка
		ФормаЗаполнена = Форма.ПроверитьЗаполнение();
	Исключение
		
		НоваяСтрока_Информация = _Информация.Добавить();
		НоваяСтрока_Информация.ТипОшибки = "Справочники";
		НоваяСтрока_Информация.ПроверямыйОбъект = Форма.ИмяФормы;
		НоваяСтрока_Информация.Данные           = Ссылка;
		НоваяСтрока_Информация.Описание         = НСтр("ru = 'Ошибка проверки заполнения формы'")
		+ Символы.ПС + ИмяФормыТестирования 
		+ Символы.ПС + НСтр("ru = 'Проверить заполнение (записать) объект по ссылке: '") + НавигационнаяСсылка 
		+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Если Не ФормаЗаполнена Тогда
		
		НоваяСтрока_Информация = _Информация.Добавить();
		НоваяСтрока_Информация.ТипОшибки = "Справочники";
		НоваяСтрока_Информация.ПроверямыйОбъект = Форма.ИмяФормы;
		НоваяСтрока_Информация.Данные           = Ссылка;
		НоваяСтрока_Информация.Описание         = НСтр("ru = 'Объект не проходит проверку заполнения в форме'")
		+ Символы.ПС + ИмяФормыТестирования 
		+ Символы.ПС + НСтр("ru = 'Проверить заполнение (записать) объект по ссылке: '") + НавигационнаяСсылка 
		+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Если Форма.Открыта() Тогда
			Форма.Закрыть();
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.Открыта() Тогда
		Форма.Закрыть();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Справочники_ЗакрытьОткрывшиесяОкна(ФормаТестируемогоОбъекта = Неопределено)
	
	ТекущееОкно = ЭтаФорма.Окно;
	
	ОкнаНаЗакрытие = Новый Массив;
	
	Окна = ПолучитьОкна();
	Для Икс = 0 По Окна.Количество() - 1 Цикл
		
		Если Окна[Икс] = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Окошко = Окна[Икс];
		
		Если ОткрытыеОкна.Найти(Окошко) <> Неопределено ИЛИ ТекущееОкно = Окошко Тогда
			Продолжить;
		КонецЕсли; 
		
		ОкнаНаЗакрытие.Добавить(Окошко);
		
	КонецЦикла; 
	
	Для Каждого Окошко Из ОкнаНаЗакрытие Цикл
		Для Каждого Форма Из Окошко.Содержимое Цикл
			
			Если Форма = ФормаТестируемогоОбъекта Тогда
				Продолжить;
			КонецЕсли; 
			
			Если Форма.Открыта() Тогда
				Форма.Закрыть();
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Справочники_ПолучитьИмяОсновнойФормыОбъектаОбъектаМетаданных(ИмяОбъектаМетаданных)
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаМетаданных);
	
	Если ОбъектМетаданных.ОсновнаяФормаОбъекта <> Неопределено Тогда
		Возврат ОбъектМетаданных.ОсновнаяФормаОбъекта.ПолноеИмя();
	КонецЕсли;
	
	Возврат "Не удалось определить форму объекта по умолчанию";
	
КонецФункции

// Выборка случайных неповторяющихся элементов из массива
// Если элементов недостаточно, будут возвращены все
&НаСервереБезКонтекста
Функция Справочники_ВыбратьСлучайныеЭлементыМассива(ИсходныйМассив,Количество)
	
	ВКоллекции = ИсходныйМассив.Количество();
	
	Если ВКоллекции <= Количество Тогда
		Возврат ИсходныйМассив;
	КонецЕсли;

	ГСЧ = Новый ГенераторСлучайныхЧисел;
	Результат = Новый Массив;
	
	Для Сч = 0 По Количество - 1 Цикл
		Индекс = ГСЧ.СлучайноеЧисло(0, ВКоллекции - 1);
		Результат.Добавить(ИсходныйМассив.Получить(Индекс));
		ИсходныйМассив.Удалить(Индекс);
		ВКоллекции = ВКоллекции - 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Документы_РазвернутьВсеГруппы(Команда)
	Для Каждого СтрокаДерева Из Документы_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Элементы.Документы_ДеревоОбъектов.Развернуть(СтрокаДерева.ПолучитьИдентификатор())
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Документы_СвернутьВсеГруппы(Команда)
	Для Каждого СтрокаДерева Из Документы_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Элементы.Документы_ДеревоОбъектов.Свернуть(СтрокаДерева.ПолучитьИдентификатор())
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Документы_Заполнить(Команда)
	
	Документы_СформироватьДеревоМетаданных();

КонецПроцедуры

&НаКлиенте
Процедура Документы_УстановитьФлажки(Команда)
	
	Документы_ПроставитьЗначенияПодчиненных(Документы_ДеревоОбъектов, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Документы_СнятьФлажки(Команда)
	
	Документы_ПроставитьЗначенияПодчиненных(Документы_ДеревоОбъектов, Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Документы_ПроставитьЗначенияПодчиненных(Строка, Значение)
	
	Для Каждого ПодСтрока Из Строка.ПолучитьЭлементы() Цикл
		
		ПодСтрока.Тестировать = Значение;
		Если ПодСтрока.ПолучитьЭлементы().Количество() <> 0 Тогда
			Документы_ПроставитьЗначенияПодчиненных(ПодСтрока, Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Документы_СформироватьДеревоМетаданных()
	
	ТекстОшибки = "";
	
	Попытка
		ДеревоМетаданныхКонфигурации = ОбменДаннымиПовтИсп.ПолучитьДеревоМетаданныхКонфигурации(Новый Структура);
	Исключение
		ТекстОшибки = НСтр("ru = 'Исключение при вызове ОбменДаннымиПовтИсп.ПолучитьДеревоМетаданныхКонфигурации() :
		                   |'") + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		Попытка
			ДеревоМетаданныхКонфигурации = ОбменДаннымиПовтИсп.МетаданныеКонфигурации(Новый Структура);
		Исключение
			
			ТекстОшибки = ТекстОшибки + НСтр("ru = '
			                                  |Исключение при вызове ОбменДаннымиПовтИсп.МетаданныеКонфигурации() :
			                                  |'")+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
	КонецЕсли; 
	
	НовоеДерево = ДеревоМетаданныхКонфигурации.Скопировать();
	
	Документы_УдалитьЛишниеОбъекты(НовоеДерево);

	Документы_ДеревоОбъектов.ПолучитьЭлементы().Очистить();
	
	ОбщегоНазначения.ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(Документы_ДеревоОбъектов.ПолучитьЭлементы(), НовоеДерево);
	
КонецПроцедуры

&НаКлиенте
Процедура Документы_ВыполнитьТестНаКлиенте()
	
	Документы_ОчиститьДатыЗапрета();
	
	Документы_ЗаполнитьПроверяемыеСсылки();
	
	ВсеПротестировано = Истина;
	Для Каждого ТекКласс Из Документы_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		
		Для Каждого ТекДокумент Из ТекКласс.ПолучитьЭлементы() Цикл
			
			Если Не ТекДокумент.Тестировать Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Ссылка Из ТекДокумент.СписокСсылок Цикл
				
				Документы_ПротестироватьОбъектПоСсылкеНаКлиенте(ТекДокумент.ПолноеИмя, Ссылка.Значение);
				ВсеПротестировано = Ложь;
				
			КонецЦикла; 
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВсеПротестировано Тогда
		Возврат;
	КонецЕсли; 
	
	Документы_ВыполнитьТестНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура Документы_ВыполнитьТестНаСервере()
	
	Для Каждого ТекКласс Из Документы_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		
		Для Каждого ТекДокумент Из ТекКласс.ПолучитьЭлементы() Цикл
			
			Если Не ТекДокумент.Тестировать Тогда
				Продолжить;
			КонецЕсли;
			
			МассивРегистраторов = ТекДокумент.СписокСсылок.ВыгрузитьЗначения();
			
			Если МассивРегистраторов.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Документы_ПерезаписатьДокументы(МассивРегистраторов);
			
		КонецЦикла; 
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Документы_ПерезаписатьДокументы(МассивРегистраторов)
	
	Отбор = Новый Структура("КлючДанных,Текст");
	Для Каждого ТекДокумент Из МассивРегистраторов Цикл
		
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ТекДокумент);
		
		ДокументОбъект      = ТекДокумент.ПолучитьОбъект();
		
		ЕстьОшибкиЗаполнения  = Не ДокументОбъект.ПроверитьЗаполнение();
		СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
		
		Если ЕстьОшибкиЗаполнения Тогда
			
			Для Каждого СтрокаСообщения Из СообщенияПользователю Цикл
				
				Ключ = ?(ЗначениеЗаполнено(СтрокаСообщения.КлючДанных), СтрокаСообщения.КлючДанных, ТекДокумент);
				
				ОшибкаЗаполнения = "";//СоздатьОписаниеОшибки();
				
				Метаданное     = Метаданные.НайтиПоТипу(ТипЗнч(Ключ));
				ИмяМетаданного = ?(Метаданное <> Неопределено, Метаданное.ПолноеИмя(), Строка(Ключ));
				
				пОписание =  "Ошибка проверки заполнения " + ИмяМетаданного + ПолучитьНавигационнуюСсылку(Ключ) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Если _Информация.НайтиСтроки(Новый Структура("Данные, Описание", Ключ, пОписание)).Количество() = 0 Тогда
					НоваяСтрока_Информация = _Информация.Добавить();
					НоваяСтрока_Информация.ТипОшибки = "Документы";
					НоваяСтрока_Информация.ПроверямыйОбъект = ИмяМетаданного;
					НоваяСтрока_Информация.Данные           = Ключ;
					НоваяСтрока_Информация.Описание         = пОписание;
				КонецЕсли;
			КонецЦикла; 
			
		КонецЕсли;
			
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			
			Метаданное     = Метаданные.НайтиПоТипу(ТипЗнч(ТекДокумент));
			ИмяМетаданного = ?(Метаданное <> Неопределено, Метаданное.ПолноеИмя(), Строка(ТекДокумент));
			
			НоваяСтрока_Информация = _Информация.Добавить();
			НоваяСтрока_Информация.ТипОшибки = "Документы";
			НоваяСтрока_Информация.ПроверямыйОбъект = ИмяМетаданного;
			НоваяСтрока_Информация.Данные           = ТекДокумент;
			НоваяСтрока_Информация.Описание         = "Ошибка при проведении документа " + ИмяМетаданного 
			+ Символы.ПС + НавигационнаяСсылка 
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

		КонецПопытки;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура Документы_УдалитьЛишниеОбъекты(Дерево)

	МассивУдаляемыхЭлементов = Новый Массив();
	
	Для каждого ТекущийКласс Из Дерево.Строки Цикл
	
		Если ТекущийКласс.Имя <> "Документы" Тогда
		
			МассивУдаляемыхЭлементов.Добавить(ТекущийКласс);
		
		КонецЕсли;
	
	КонецЦикла; 
	
	Для Каждого Элемент Из МассивУдаляемыхЭлементов Цикл
	
		Дерево.Строки.Удалить(Элемент);
	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура Документы_ОчиститьДатыЗапрета()
	
	НаборДатЗапрета = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	НаборДатЗапрета.Записать();

КонецПроцедуры

&НаСервере
Процедура Документы_ЗаполнитьПроверяемыеСсылки()

	НовоеДерево = РеквизитФормыВЗначение("Документы_ДеревоОбъектов", Тип("ДеревоЗначений"));
	Документы_ЗаполнитьСпискиПроверяемыхСсылок(НовоеДерево);
	ЗначениеВРеквизитФормы(НовоеДерево, "Документы_ДеревоОбъектов");

КонецПроцедуры

&НаКлиенте
Процедура Документы_ПротестироватьОбъектПоСсылкеНаКлиенте(ИмяОбъектаМетаданных, Ссылка)
	
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Ссылка);
	ПараметрыОткрытия   = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", Ссылка);
	
	ИмяФормыТестирования = ИмяОбъектаМетаданных + ".ФормаОбъекта";
	
	Попытка
		Форма = ОткрытьФорму(ИмяФормыТестирования, ПараметрыОткрытия);
	Исключение
		
		НоваяСтрока_Информация = _Информация.Добавить();
		НоваяСтрока_Информация.ТипОшибки = "Документы";
		НоваяСтрока_Информация.ПроверямыйОбъект = ИмяФормыТестирования;
		НоваяСтрока_Информация.Данные           = Ссылка;
		НоваяСтрока_Информация.Описание         = "Ошибка открытия формы " + ИмяФормыТестирования 
		+ Символы.ПС + НСтр("ru = 'Открыть форму объекта по ссылке : '") + НавигационнаяСсылка
		+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Возврат;
		
	КонецПопытки;
	
	Документы_ЗакрытьОткрывшиесяОкна(Форма);
	
	// Окно не открылось
	// Возможно в обработчиках ПриСоздании или ПриОткрытии, флаг Отказ = Истина
	Если Форма = Неопределено ИЛИ Форма.Окно = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Попытка
		ФормаЗаполнена = Форма.ПроверитьЗаполнение();
	Исключение
		
		НоваяСтрока_Информация = _Информация.Добавить();
		НоваяСтрока_Информация.ТипОшибки = "Документы";
		НоваяСтрока_Информация.ПроверямыйОбъект = ИмяФормыТестирования;
		НоваяСтрока_Информация.Данные           = Ссылка;
		НоваяСтрока_Информация.Описание         = "Ошибка проверки заполнения формы " + ИмяФормыТестирования 
		+ Символы.ПС + НСтр("ru = 'Проверить заполнение (записать) объект по ссылке: '") + НавигационнаяСсылка
		+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Возврат;
		
	КонецПопытки;
	
	Если Форма.Открыта() Тогда
		Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Документы_ЗакрытьОткрывшиесяОкна(ФормаТестируемогоОбъекта = Неопределено)
	
	ТекущееОкно = ЭтаФорма.Окно;
	
	ОкнаНаЗакрытие = Новый Массив;
	
	Окна = ПолучитьОкна();
	Для Икс = 0 По Окна.Количество() - 1 Цикл
		
		Если Окна[Икс] = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Окошко = Окна[Икс];
		
		Если ОткрытыеОкна.Найти(Окошко) <> Неопределено ИЛИ ТекущееОкно = Окошко Тогда
			Продолжить;
		КонецЕсли; 
		
		ОкнаНаЗакрытие.Добавить(Окошко);
		
	КонецЦикла; 
	
	Для Каждого Окошко Из ОкнаНаЗакрытие Цикл
		Для Каждого Форма Из Окошко.Содержимое Цикл
			
			Если Форма = ФормаТестируемогоОбъекта Тогда
				Продолжить;
			КонецЕсли; 
			
			Если Форма.Открыта() Тогда
				Форма.Закрыть();
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура Документы_ЗаполнитьСпискиПроверяемыхСсылок(Дерево)
	
	Для Каждого ТекДокумент Из Дерево.Строки[0].Строки Цикл
		
		Если Не ТекДокумент.Тестировать Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекДокумент.Количество) Тогда
			Количество = ТекДокумент.Количество;
		Иначе
			Количество = Документы_КоличествоОбъектов;
		КонецЕсли; 
		
		ПервыеКоличество = ?(Количество = 0, "",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(" ПЕРВЫЕ %1 ", Формат(Количество, "ЧГ=")));
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ %ПервыеКоличество%
		|	ДокументТестирования.Ссылка
		|ИЗ
		|	%ДокументТестирования% КАК ДокументТестирования
		|ГДЕ
		| ДокументТестирования.Проведен
		| И НЕ ДокументТестирования.ПометкаУдаления";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ДокументТестирования%", ТекДокумент.ПолноеИмя);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПервыеКоличество%",     ПервыеКоличество);
		
		МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		ТекДокумент.СписокСсылок.ЗагрузитьЗначения(МассивСсылок);
		
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура Отчеты_ДеревоОбъектов_ТестироватьПриИзменении(Элемент)
	
	ТекущаяСтрокаДерева = Элементы.Отчеты_ДеревоОбъектов.ТекущиеДанные;
	
	Если ТекущаяСтрокаДерева.Тестировать = 2 Тогда
		ТекущаяСтрокаДерева.Тестировать = 0;
	КонецЕсли;
	
	ПроставитьЗначениеВоВсеСтроки(ТекущаяСтрокаДерева, ТекущаяСтрокаДерева.Тестировать);
	
	АктуализироватьРодителя(ТекущаяСтрокаДерева);

КонецПроцедуры

&НаКлиенте
Процедура Документы_ДеревоОбъектов_ТестироватьПриИзменении(Элемент)
	
	ТекущаяСтрокаДерева = Элементы.Документы_ДеревоОбъектов.ТекущиеДанные;
	
	Если ТекущаяСтрокаДерева.Тестировать = 2 Тогда
		ТекущаяСтрокаДерева.Тестировать = 0;
	КонецЕсли;
	
	ПроставитьЗначениеВоВсеСтроки(ТекущаяСтрокаДерева, ТекущаяСтрокаДерева.Тестировать);
	
	АктуализироватьРодителя(ТекущаяСтрокаДерева);
	
КонецПроцедуры

&НаКлиенте
Процедура Справочники_ДеревоОбъектов_ТестироватьПриИзменении(Элемент)
	
	ТекущаяСтрокаДерева = Элементы.Справочники_ДеревоОбъектов.ТекущиеДанные;
	
	Если ТекущаяСтрокаДерева.Тестировать = 2 Тогда
		ТекущаяСтрокаДерева.Тестировать = 0;
	КонецЕсли;
	
	ПроставитьЗначениеВоВсеСтроки(ТекущаяСтрокаДерева, ТекущаяСтрокаДерева.Тестировать);
	
	АктуализироватьРодителя(ТекущаяСтрокаДерева);

КонецПроцедуры

&НаКлиенте
Процедура Проверки_Заполнить(Команда)
	
	Формы_Заполнить(Неопределено);
	Отчеты_Заполнить(Неопределено);
	Печать_Заполнить(Неопределено);
	Документы_Заполнить(Неопределено);
	Справочники_Заполнить(Неопределено);
	
КонецПроцедуры
